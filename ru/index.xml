<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Содержание on Документация по Balerter</title>
    <link>https://balerter.github.io/ru/</link>
    <description>Recent content in Содержание on Документация по Balerter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Feb 2020 16:08:54 +0300</lastBuildDate>
    
	<atom:link href="https://balerter.github.io/ru/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Тип Clickhouse</title>
      <link>https://balerter.github.io/ru/configuration/datasources/clickhouse/</link>
      <pubDate>Tue, 04 Feb 2020 17:10:36 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/configuration/datasources/clickhouse/</guid>
      <description>name: ch1 host: domain.com port: 6440 username: username password: password database: database ssl_cert_path: /path/to/cert.crt name  Обязательное поле, Уникальное значение среди источников данных этого типа
 Название источника данных
В названии могут использоваться латинские символы, цифры и знак подчеркивания
По этому имени вы будете обращаться из скрипта, например:
local ds = require(&#39;datasource.clickhouse.ch1&#39;) host  Обязательное поле
 Хост для подключения к БД
port  По-умолчанию 6440
 Порт для подключения к БД</description>
    </item>
    
    <item>
      <title>Пример конфигурации</title>
      <link>https://balerter.github.io/ru/configuration/example/</link>
      <pubDate>Tue, 04 Feb 2020 16:37:04 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/configuration/example/</guid>
      <description>Файл конфигурации описывается в yaml формате
Секции конфигурации высшего уровня:
 scripts - описание источников скриптов datasources - описание источников данных channels - описание каналов отправки уведомлений global - глобальные настройки  Пример:
scripts: sources: folder: - name: scripts path: /opt/scripts mask: &#39;*.lua&#39; update_interval: 5s datasources: clickhouse: - name: ch1 host: domain.com port: 6440 username: username password: password database: database ssl_cert_path: /path/to/cert.crt prometheus: - name: prom1 url: domain.com basic_auth: username: username password: password postgres: - name: pg1 host: domain.</description>
    </item>
    
    <item>
      <title>О Balerter</title>
      <link>https://balerter.github.io/ru/basics/about/</link>
      <pubDate>Tue, 04 Feb 2020 16:32:46 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/basics/about/</guid>
      <description>Balerter - это система оповещний, основанная на скриптах.
Все логика получения, обработки данных и отправки оповещений описывается в LUA-скриптах.
todo</description>
    </item>
    
    <item>
      <title>О lua модулях</title>
      <link>https://balerter.github.io/ru/luamodules/about/</link>
      <pubDate>Tue, 04 Feb 2020 16:32:46 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/luamodules/about/</guid>
      <description>Вы можете использовать внешие модули, написанные на Lua
Для этого вам следует поместить их в каталог modules
Модуль может быть описан в единственном файле. В этом случае, имя файла будет являться именем для импортирования этого модуля.
Например:
root | | modules | conv.lua local conv = require(&#39;conv&#39;) Либо модуль может быть разбит на различные файлы. В этом случае, все файлы должны быть в одном каталоге. А код эспорта модуля должен размещаться в файле init.</description>
    </item>
    
    <item>
      <title>Описание API</title>
      <link>https://balerter.github.io/ru/api/api/</link>
      <pubDate>Tue, 04 Feb 2020 16:32:46 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/api/api/</guid>
      <description>В конфигурации в секции Global вы можете указать адрес, на котором будет слушать HTTP API сервер. По-умолчанию это 127.0.0.1:2000.
Запросы к API осуществляются на этот адрес по пути /api/&amp;lt;API_VERSION&amp;gt;/&amp;lt;API_QUERY&amp;gt;
 Версия API v1
Описания моделей AlertInfo    field type description     count int количество вызовов данного уровня алерта с момента последнего изменения   last_change datetime время, когда последний раз было изменения уровня алерта   level int текущий уровень алерта (см.</description>
    </item>
    
    <item>
      <title>Основы</title>
      <link>https://balerter.github.io/ru/scripts/basics/</link>
      <pubDate>Tue, 04 Feb 2020 16:32:46 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/scripts/basics/</guid>
      <description>Скрипты пишутся на языке Lua 5.1
С официальной документацией можно ознакомться тут
 Для разработчиков: в исходном коде используется Golang библиотка https://github.com/yuin/gopher-lua для исполнения Lua скриптов
 Пример простого скрипта с подробными комментариями: (комментарии в Lua начинаются с двойного минуса --)
-- в начале скрипта можно указать некоторые мета-теги. Например, с помощью тега @interval можно указать частоту исполнения скрипта -- все возможные варианты мета-тегов смотрите в соотвествующем разделе -- @interval 5m -- в переменную sizeLimit запомним значение 1e9, которое будет в нашем случае означать 1Гб (1e9 в байтах) local sizeLimit = 1000000000 -- подключим модуль ядра Log для возможности вывода сообщений в лог сервиса local log = require(&amp;quot;log&amp;quot;) -- подключим источник данных типа Clickhouse с названием ch1 (он должен быть описан в файле конфигурации) local ch1 = require(&amp;quot;datasource.</description>
    </item>
    
    <item>
      <title>Тип Prometheus</title>
      <link>https://balerter.github.io/ru/configuration/datasources/prometheus/</link>
      <pubDate>Tue, 04 Feb 2020 17:10:42 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/configuration/datasources/prometheus/</guid>
      <description>name: prom1 url: domain.com basic_auth: username: username password: password name  Обязательное поле, Уникальное значение среди источников данных этого типа
 Название источника данных
В названии могут использоваться латинские символы, цифры и знак подчеркивания
По этому имени вы будете обращаться из скрипта, например:
local ds = require(&#39;datasource.prometheus.prom1&#39;) url  Обязательное поле
 URL для запросов. Требуемые пути API, например /api/v1/query будут добавлены автоматически
basic_auth Имя и пароль пользователя, если источник данных защищен Basic аутентификацией</description>
    </item>
    
    <item>
      <title>Мета-теги</title>
      <link>https://balerter.github.io/ru/scripts/meta-tags/</link>
      <pubDate>Tue, 04 Feb 2020 16:32:46 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/scripts/meta-tags/</guid>
      <description>В начале каждого скрипта можно указать мета-теги
-- @interval 10s -- @ignore local log = require(&#39;log&#39;) ... Каждый мета-тег имеет вид @&amp;lt;TAG_NAME&amp;gt; [&amp;lt;TAG_OPTIONS&amp;gt;]
Все мета-теги должны быть строго в начале скрипта и располагаться в начале комментария.
Любая не пустая строка не-комментарий прервет обработку мета-тегов.
-- можно помещать комментарии без мета-тегов. они будут пропущены -- @interval 10s (комментарий тут не допускается, перенесите его на другую строку, если он необходим) -- -- пустая строка комментария тоже допустима -- а так же допустимы пустые строки local a = 10 -- @ignore -- этот мета-тег не будет обработан, так как перед ним есть не пустая строка не-комментарий Мета-теги @interval &amp;lt;TIME INTERVAL&amp;gt; Позволяет указать интервал, с которым будет запускаться скрипт.</description>
    </item>
    
    <item>
      <title>Создание lua модуля</title>
      <link>https://balerter.github.io/ru/luamodules/new/</link>
      <pubDate>Tue, 04 Feb 2020 16:32:46 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/luamodules/new/</guid>
      <description>Пример простого модуля, который эспортирует метод add.
add принимает два аргумента, складывает их и возвращает результат
| | modules | math.lua -- math.lua local M = {} local function add(a, b) return a + b end rawset(M, &#39;add&#39;, add) return M Пример использования:
local math = require(&#39;math&#39;) local res = math.add(10, 20) print(res) -- 30 </description>
    </item>
    
    <item>
      <title>Установка</title>
      <link>https://balerter.github.io/ru/basics/install/</link>
      <pubDate>Tue, 04 Feb 2020 16:20:36 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/basics/install/</guid>
      <description>Докер Для простейшего запуска Balerter вам требуется передать ему конфигурационный файл
docker run \ -v /path/to/config.yml:/opt/config.yml \ balerter/balerter -config=/opt/config.yml Исходный код Клонируем репозиторий на локальную машину и запускаем Balerter, указав конфигурационный файл
 Требуется Go версии 1.13 и выше
 git clone https://github.com/balerter/balerter.git cd balerter go run ./cmd/balerter -config /path/to/config.yml </description>
    </item>
    
    <item>
      <title>Тип Postgres</title>
      <link>https://balerter.github.io/ru/configuration/datasources/postgres/</link>
      <pubDate>Tue, 04 Feb 2020 17:10:48 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/configuration/datasources/postgres/</guid>
      <description>name: pg1 host: domain.com port: 5432 username: username password: password database: database ssl_mode: verify-full ssl_cert_path: /path/to/cert.crt name  Обязательное поле, Уникальное значение среди источников данных этого типа
 Название источника данных
В названии могут использоваться латинские символы, цифры и знак подчеркивания
По этому имени вы будете обращаться из скрипта, например:
local ds = require(&#39;datasource.postgres.pg1&#39;) host  Обязательное поле
 Хост для подключения к БД
port  По-умолчанию 5432
 Порт для подключения к БД</description>
    </item>
    
    <item>
      <title>Тип Folder</title>
      <link>https://balerter.github.io/ru/configuration/scripts/folder/</link>
      <pubDate>Tue, 04 Feb 2020 16:50:16 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/configuration/scripts/folder/</guid>
      <description>name: scripts path: /opt/scripts mask: &#39;*.lua&#39; update_interval: 5s name  Обязательное поле, Уникальное значение
 Название источника скрипта, в том числе используется при логгировании
В названии могут использоваться латинские символы, цифры и знак подчеркивания
path  Обязательное поле
 Путь к папке со скриптами.
mask  По умолчанию: *.lua
 Макса для выбора файлов
update_interval  По умолчанию: 10s
 С указанным интервалов система будет проверять изменения файлов в данной папке и, при необходимости, останавливать/запускать или перезапускать скрипты</description>
    </item>
    
    <item>
      <title>Тип Slack</title>
      <link>https://balerter.github.io/ru/configuration/channels/slack/</link>
      <pubDate>Tue, 04 Feb 2020 16:50:16 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/configuration/channels/slack/</guid>
      <description>slack: - name: slack-notification token: SLACK-APPLICATION-TOKEN channel: notification name  Обязательное поле, Уникальное значение
 Название канала уведомлений, в том числе используется при логгировании
В названии могут использоваться латинские символы, цифры, знаки минуса и подчеркивания
token  Обязательное поле
 Токен Slack приложения
channel  Обязательное поле
 Имя Slack канала</description>
    </item>
    
    <item>
      <title>Тип Telegram</title>
      <link>https://balerter.github.io/ru/configuration/channels/telegram/</link>
      <pubDate>Tue, 04 Feb 2020 16:50:16 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/configuration/channels/telegram/</guid>
      <description>telegram: - name: tg1 token: TELEGRAM-BOT-TOKEN chat_id: 100500 proxy: address: 10.20.30.40:5060 auth: username: user password: secret name  Обязательное поле, Уникальное значение
 Название канала уведомлений, в том числе используется при логгировании
В названии могут использоваться латинские символы, цифры, знаки минуса и подчеркивания
token  Обязательное поле
 Токен telegram бота
chat_id  Обязательное поле
 ID чата
proxy  По-умолчанию: не используется
 Настройки socks5 прокси для отправки уведомлений</description>
    </item>
    
  </channel>
</rss>