<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Содержание on Документация по Balerter</title>
    <link>https://balerter.github.io/ru/</link>
    <description>Recent content in Содержание on Документация по Balerter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Feb 2020 16:08:54 +0300</lastBuildDate>
    
	<atom:link href="https://balerter.github.io/ru/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Тип Clickhouse</title>
      <link>https://balerter.github.io/ru/configuration/datasources/clickhouse/</link>
      <pubDate>Tue, 04 Feb 2020 17:10:36 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/configuration/datasources/clickhouse/</guid>
      <description>name: ch1 host: domain.com port: 6440 username: username password: password database: database ssl_cert_path: /path/to/cert.crt name  Обязательное поле, Уникальное значение среди источников данных этого типа
 Название источника данных
В названии могут использоваться латинские символы, цифры и знак подчеркивания
По этому имени вы будете обращаться из скрипта, например:
local ds = require(&#39;datasource.clickhouse.ch1&#39;) host  Обязательное поле
 Хост для подключения к БД
port  По-умолчанию 6440
 Порт для подключения к БД</description>
    </item>
    
    <item>
      <title>s3</title>
      <link>https://balerter.github.io/ru/configuration/storages/s3/</link>
      <pubDate>Tue, 04 Feb 2020 17:06:21 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/configuration/storages/s3/</guid>
      <description>Настройки хранилища s3
name: dev region: us-east1 key: SOME_KEY secret: SOME_SECRET endpoint: SOME_ENDPOINT bucket: SOME_BUCKET name  Обязательное поле, Уникальное значение среди хранилищ этого типа
 Название хранилища
region  Обязательное поле
 Регион
key  Обязательное поле
 Ключ доступа
secret  Обязательное поле
 Секретный ключ
endpoint  Обязательное поле
 Эндпоинт (без схемы)
bucket  Обязательное поле
 Имя бакета</description>
    </item>
    
    <item>
      <title>Базовый пример</title>
      <link>https://balerter.github.io/ru/manuals/simple/</link>
      <pubDate>Tue, 04 Feb 2020 16:37:04 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/manuals/simple/</guid>
      <description>В данной статье мы по шагам проработаем настройку системы и создание скрипта для следующей задачи:
 У нас есть Prometheus, который собирает какие-то метрики. Мы хотим отслеживать метрику go_memstats_heap_objects. Если значение превысит заданный нами порог, создадим алерт.
 Конфигурирование В первую очередь требуется создать файл конфигуации:
scripts: sources: folder: - name: scripts path: /opt/scripts mask: &#39;*.lua&#39; update_interval: 5s datasources: prometheus: - name: prom1 url: 127.0.0.1:9090 channels: telegram: - name: tg1 token: TELEGRAM-BOT-TOKEN chat_id: 100500 proxy: В кофиге мы указали</description>
    </item>
    
    <item>
      <title>Пример конфигурации</title>
      <link>https://balerter.github.io/ru/configuration/example/</link>
      <pubDate>Tue, 04 Feb 2020 16:37:04 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/configuration/example/</guid>
      <description>Файл конфигурации описывается в yaml формате
Секции конфигурации высшего уровня:
 scripts - описание источников скриптов datasources - описание источников данных channels - описание каналов отправки уведомлений storages - описание хранилищ для загрузки данных. например, изображений global - глобальные настройки  Пример:
scripts: sources: folder: - name: scripts path: /opt/scripts mask: &#39;*.lua&#39; update_interval: 5s datasources: clickhouse: - name: ch1 host: domain.com port: 6440 username: username password: password database: database ssl_cert_path: /path/to/cert.</description>
    </item>
    
    <item>
      <title>Нагрузка CPU</title>
      <link>https://balerter.github.io/ru/examples/01/</link>
      <pubDate>Tue, 04 Feb 2020 16:32:46 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/examples/01/</guid>
      <description>Проверяем нагрузку на CPU. Если она выше 70% - алертим  Prometheus собирает данные с Node Exporter Метрики имеют лейбл instance, который идентифицирует каждую машину  -- @interval 30s -- @name cpu70 local cpuLimit = 0.7 local prom1 = require(&#39;datasource.prometheus.prom1&#39;) local alert = require(&#39;alert&#39;) local res, err = prom1.range(&#39;rate(sum(node_cpu_seconds_total{mode!=&amp;quot;idle&amp;quot;}) by (instance)) / rate(sum(node_cpu_seconds_total) by (instance))&#39;) if err ~= nil then return end for i, item in pairs(res) do local v = item.</description>
    </item>
    
    <item>
      <title>О Balerter</title>
      <link>https://balerter.github.io/ru/basics/about/</link>
      <pubDate>Tue, 04 Feb 2020 16:32:46 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/basics/about/</guid>
      <description>Balerter - это Alert Manager.
Основное предназначение Balerter - дать возможность как можно проще описать сложные правила алертинга.
Для простого Алерта, который срабатывает при превышении количества http запросов - достаточно будет даже встроенного функционала Grafana (оставим за скобками целесообразность этого подхода)
Однако, для более сложных случаев это не подойдет. Например, вы если вы хотите выбрать исторические данные из БД, затем сравнить их с текущими данными, сходить в сторонний сервис по API и затем уже принять решение об алертинге.</description>
    </item>
    
    <item>
      <title>О lua модулях</title>
      <link>https://balerter.github.io/ru/luamodules/about/</link>
      <pubDate>Tue, 04 Feb 2020 16:32:46 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/luamodules/about/</guid>
      <description>Вы можете использовать внешие модули, написанные на Lua
Для этого вам следует поместить их в каталог modules
Модуль может быть описан в единственном файле. В этом случае, имя файла будет являться именем для импортирования этого модуля.
Например:
root | | modules | conv.lua local conv = require(&#39;conv&#39;) Либо модуль может быть разбит на различные файлы. В этом случае, все файлы должны быть в одном каталоге. А код эспорта модуля должен размещаться в файле init.</description>
    </item>
    
    <item>
      <title>Описание API</title>
      <link>https://balerter.github.io/ru/api/api/</link>
      <pubDate>Tue, 04 Feb 2020 16:32:46 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/api/api/</guid>
      <description>В конфигурации в секции Global вы можете указать адрес, на котором будет слушать HTTP API сервер. По-умолчанию это 127.0.0.1:2000.
Запросы к API осуществляются на этот адрес по пути /api/&amp;lt;API_VERSION&amp;gt;/&amp;lt;API_QUERY&amp;gt;
 Версия API v1
Описания моделей AlertInfo    field type description     name string имя алерта   level int текущий уровень алерта (error/warning/success)   count int количество вызовов данного уровня алерта с момента последнего изменения   updated_at datetime время, когда последний раз было изменения уровня алерта, формат time.</description>
    </item>
    
    <item>
      <title>Основы</title>
      <link>https://balerter.github.io/ru/scripts/basics/</link>
      <pubDate>Tue, 04 Feb 2020 16:32:46 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/scripts/basics/</guid>
      <description>Скрипты пишутся на языке Lua 5.1
С официальной документацией можно ознакомться тут
 Для разработчиков: в исходном коде используется Golang библиотка https://github.com/yuin/gopher-lua для исполнения Lua скриптов
 Пример простого скрипта с подробными комментариями: (комментарии в Lua начинаются с двойного минуса --)
-- в начале скрипта можно указать некоторые мета-теги. Например, с помощью тега @interval можно указать частоту исполнения скрипта -- все возможные варианты мета-тегов смотрите в соотвествующем разделе -- @interval 5m -- в переменную sizeLimit запомним значение 1e9, которое будет в нашем случае означать 1Гб (1e9 в байтах) local sizeLimit = 1000000000 -- подключим модуль ядра Log для возможности вывода сообщений в лог сервиса local log = require(&amp;quot;log&amp;quot;) -- подключим источник данных типа Clickhouse с названием ch1 (он должен быть описан в файле конфигурации) local ch1 = require(&amp;quot;datasource.</description>
    </item>
    
    <item>
      <title>Тип Prometheus</title>
      <link>https://balerter.github.io/ru/configuration/datasources/prometheus/</link>
      <pubDate>Tue, 04 Feb 2020 17:10:42 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/configuration/datasources/prometheus/</guid>
      <description>name: prom1 url: domain.com basic_auth: username: username password: password name  Обязательное поле, Уникальное значение среди источников данных этого типа
 Название источника данных
В названии могут использоваться латинские символы, цифры и знак подчеркивания
По этому имени вы будете обращаться из скрипта, например:
local ds = require(&#39;datasource.prometheus.prom1&#39;) url  Обязательное поле
 URL для запросов. Требуемые пути API, например /api/v1/query будут добавлены автоматически
basic_auth Имя и пароль пользователя, если источник данных защищен Basic аутентификацией</description>
    </item>
    
    <item>
      <title>Количество горутин (с графиком)</title>
      <link>https://balerter.github.io/ru/examples/02/</link>
      <pubDate>Tue, 04 Feb 2020 16:32:46 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/examples/02/</guid>
      <description>Проверяем нагрузку на CPU. Если она выше 70% - алертим  Prometheus собирает данные В конфигурации настроено хранилище для загрузки изображений  -- @interval 30s -- @name goroutines local prom1 = require(&#39;datasource.prometheus.prom1&#39;) local alert = require(&#39;alert&#39;) local chart = require(&#39;chart&#39;) local storage = require(&#39;storage.s3.dev&#39;) local now = os.time(os.date(&amp;quot;!*t&amp;quot;)) rangeOptions = { [&#39;start&#39;] = now - 86400, [&#39;end&#39;] = now, [&#39;step&#39;] = &#39;3600&#39; } res = prom1.range(&#39;sum(go_goroutines)&#39;, rangeOptions) local chartOptions = { [&#39;series&#39;] = { { [&#39;color&#39;] = &#39;red&#39;, [&#39;line_color&#39;] = &#39;blue&#39;, [&amp;quot;data&amp;quot;] = res[1].</description>
    </item>
    
    <item>
      <title>Мета-теги</title>
      <link>https://balerter.github.io/ru/scripts/meta-tags/</link>
      <pubDate>Tue, 04 Feb 2020 16:32:46 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/scripts/meta-tags/</guid>
      <description>В начале каждого скрипта можно указать мета-теги
-- @interval 10s -- @ignore local log = require(&#39;log&#39;) ... Каждый мета-тег имеет вид @&amp;lt;TAG_NAME&amp;gt; [&amp;lt;TAG_OPTIONS&amp;gt;]
Все мета-теги должны быть строго в начале скрипта и располагаться в начале комментария.
Любая не пустая строка не-комментарий прервет обработку мета-тегов.
-- можно помещать комментарии без мета-тегов. они будут пропущены -- @interval 10s (комментарий тут не допускается, перенесите его на другую строку, если он необходим) -- -- пустая строка комментария тоже допустима -- а так же допустимы пустые строки local a = 10 -- @ignore -- этот мета-тег не будет обработан, так как перед ним есть не пустая строка не-комментарий Мета-теги @interval &amp;lt;TIME INTERVAL&amp;gt; Позволяет указать интервал, с которым будет запускаться скрипт.</description>
    </item>
    
    <item>
      <title>Создание lua модуля</title>
      <link>https://balerter.github.io/ru/luamodules/new/</link>
      <pubDate>Tue, 04 Feb 2020 16:32:46 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/luamodules/new/</guid>
      <description>Пример простого модуля, который эспортирует метод add.
add принимает два аргумента, складывает их и возвращает результат
| | modules | math.lua -- math.lua local M = {} local function add(a, b) return a + b end rawset(M, &#39;add&#39;, add) return M Пример использования:
local math = require(&#39;math&#39;) local res = math.add(10, 20) print(res) -- 30 </description>
    </item>
    
    <item>
      <title>Установка</title>
      <link>https://balerter.github.io/ru/basics/install/</link>
      <pubDate>Tue, 04 Feb 2020 16:20:36 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/basics/install/</guid>
      <description>Докер Официальный образ: https://hub.docker.com/r/balerter/balerter
Для простейшего запуска Balerter вам требуется передать ему конфигурационный файл
docker run \ -v /path/to/config.yml:/opt/config.yml \ balerter/balerter -config=/opt/config.yml Исходный код Клонируем репозиторий на локальную машину и запускаем Balerter, указав конфигурационный файл
 Требуется Go версии 1.13 или выше
 git clone https://github.com/balerter/balerter.git cd balerter go run ./cmd/balerter -config /path/to/config.yml </description>
    </item>
    
    <item>
      <title>Тип Postgres</title>
      <link>https://balerter.github.io/ru/configuration/datasources/postgres/</link>
      <pubDate>Tue, 04 Feb 2020 17:10:48 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/configuration/datasources/postgres/</guid>
      <description>name: pg1 host: domain.com port: 5432 username: username password: password database: database ssl_mode: verify-full ssl_cert_path: /path/to/cert.crt name  Обязательное поле, Уникальное значение среди источников данных этого типа
 Название источника данных
В названии могут использоваться латинские символы, цифры и знак подчеркивания
По этому имени вы будете обращаться из скрипта, например:
local ds = require(&#39;datasource.postgres.pg1&#39;) host  Обязательное поле
 Хост для подключения к БД
port  По-умолчанию 5432
 Порт для подключения к БД</description>
    </item>
    
    <item>
      <title>Предустановленные модули</title>
      <link>https://balerter.github.io/ru/luamodules/presets/</link>
      <pubDate>Tue, 04 Feb 2020 16:32:46 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/luamodules/presets/</guid>
      <description>Предустановленные модули По-умолчанию с Balerter предоставляются некоторые предустановленные модули в каталоге modules.
Они не являются необходимыми для функционирования. Однако, вы можете использовать их в своих скриптах. Внутри каждого предустарновленного модуля есть описание об экспортируемых методах.
h (helper) Подключение:
local h = require(&#39;h&#39;) Методы tableToMap(table, keyFieldName) table, error Предназначен для преобразования таблицы со строкам в хеш-таблицу, где ключами будут являться значения поля с именем keyFieldName
Пример:
table = { { date = &#39;2020-01-01&#39;, id = &#39;a&#39;, name = &#39;aa&#39;}, { date = &#39;2020-01-01&#39;, id = &#39;b&#39;, name = &#39;bb&#39; }, .</description>
    </item>
    
    <item>
      <title>Тип MySQL</title>
      <link>https://balerter.github.io/ru/configuration/datasources/mysql/</link>
      <pubDate>Tue, 04 Feb 2020 17:10:48 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/configuration/datasources/mysql/</guid>
      <description>name: mysql1 dsn: user:secret@tcp(127.0.0.1:3306)/database name  Обязательное поле, Уникальное значение среди источников данных этого типа
 Название источника данных
В названии могут использоваться латинские символы, цифры и знак подчеркивания
По этому имени вы будете обращаться из скрипта, например:
local ds = require(&#39;datasource.postgres.mysql1&#39;) dsn  Обязательное поле
 Строка (Data Source Name) для подключения к БД
Формат: [username[:password]@][protocol[(address)]]/dbname[?param1=value1&amp;amp;...&amp;amp;paramN=valueN]
 В описании используемой библиотеки можно посмотреть подробнее про построение DSN
 </description>
    </item>
    
    <item>
      <title>Тип Folder</title>
      <link>https://balerter.github.io/ru/configuration/scripts/folder/</link>
      <pubDate>Tue, 04 Feb 2020 16:50:16 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/configuration/scripts/folder/</guid>
      <description>name: scripts path: /opt/scripts mask: &#39;*.lua&#39; update_interval: 5s name  Обязательное поле, Уникальное значение
 Название источника скрипта, в том числе используется при логгировании
В названии могут использоваться латинские символы, цифры и знак подчеркивания
path  Обязательное поле
 Путь к папке со скриптами.
mask  По умолчанию: *.lua
 Макса для выбора файлов
update_interval  По умолчанию: 10s
 С указанным интервалов система будет проверять изменения файлов в данной папке и, при необходимости, останавливать/запускать или перезапускать скрипты</description>
    </item>
    
    <item>
      <title>Тип Slack</title>
      <link>https://balerter.github.io/ru/configuration/channels/slack/</link>
      <pubDate>Tue, 04 Feb 2020 16:50:16 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/configuration/channels/slack/</guid>
      <description>slack: - name: slack-notification token: SLACK-APPLICATION-TOKEN channel: notification name  Обязательное поле, Уникальное значение
 Название канала уведомлений, в том числе используется при логгировании
В названии могут использоваться латинские символы, цифры, знаки минуса и подчеркивания
token  Обязательное поле
 Токен Slack приложения
channel  Обязательное поле
 Имя Slack канала</description>
    </item>
    
    <item>
      <title>Тип Syslog</title>
      <link>https://balerter.github.io/ru/configuration/channels/syslog/</link>
      <pubDate>Tue, 04 Feb 2020 16:50:16 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/configuration/channels/syslog/</guid>
      <description>Сообщения, сериализованные в json, будут отправляться на syslog сервер.
syslog: - name: default tag: balerter network: tcp address: 127.0.0.1:10515 priority: &#39;EMERG|DAEMON&#39; name  Обязательное поле, Уникальное значение
 Название канала уведомлений, в том числе используется при логгировании
В названии могут использоваться латинские символы, цифры, знаки минуса и подчеркивания
tag  По-умолчанию: пустая строка
 Тег syslog
network  По-умолчанию: пустая строка
 Тип сети для syslog сервиса.
 udp tcp пустая строка для использования локального сервиса  address  По-умолчанию: пустая строка</description>
    </item>
    
    <item>
      <title>Тип Telegram</title>
      <link>https://balerter.github.io/ru/configuration/channels/telegram/</link>
      <pubDate>Tue, 04 Feb 2020 16:50:16 +0300</pubDate>
      
      <guid>https://balerter.github.io/ru/configuration/channels/telegram/</guid>
      <description>telegram: - name: tg1 token: TELEGRAM-BOT-TOKEN chat_id: 100500 proxy: address: 10.20.30.40:5060 auth: username: user password: secret name  Обязательное поле, Уникальное значение
 Название канала уведомлений, в том числе используется при логгировании
В названии могут использоваться латинские символы, цифры, знаки минуса и подчеркивания
token  Обязательное поле
 Токен telegram бота
chat_id  Обязательное поле
 ID чата
proxy  По-умолчанию: не используется
 Настройки socks5 прокси для отправки уведомлений</description>
    </item>
    
  </channel>
</rss>